networks:
  default:
    name: spark
    driver: bridge
    attachable: true

services:
  ##################
  # POSTGRES DB    #
  ##################
  # psql -h localhost -U postgres
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    # Run with logical replication enabled for Debezium.
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    volumes:
      # The official postgres docker image will run .sql scripts 
      # found in the /docker-entrypoint-initdb.d/ folder.
      - ./postgres/initdb:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  
  ##################
  # Test Data      #
  ##################

  test-data:
    image: python:3.11-alpine
    container_name: test-data
    depends_on:
      postgres:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
      debezium-init:
        condition: service_completed_successfully
    volumes:
      - ./app:/app
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Postgres to be ready..."
        sleep 3
        pip install psycopg2-binary
        echo "Inserting test data..."
        echo "y" | python /app/insert_test_data.py
        echo "Test data insertion complete!"


  ##################
  # KAFKA CLUSTER  #
  ##################
  # Zookeeper is required by Kafka. It is used to keep metadata,
  # and also used to promote a new leader when the current leader fails.
  zookeeper:
    image: quay.io/debezium/zookeeper:2.4
    container_name: zookeeper
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    volumes:
      - zookeeper_data:/zookeeper/data
      - zookeeper_log:/zookeeper/log

  # === Kafka Broker, single node ===
  kafka:
    image: quay.io/debezium/kafka:2.4
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - 9092:9092
    volumes:
      - kafka_data:/kafka/data
      - kafka_logs:/kafka/logs
    healthcheck:
      test: ["CMD", "/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 40s

  # === Kafka UI to view the Kafka topics ===
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    ports:
      - 8090:8080
  
  ##################
  # Debezium       #
  ##################
  # See the documentation of REST API.
  # https://docs.confluent.io/platform/current/connect/references/restapi.html
  kafka-connect:
    image: quay.io/debezium/connect:2.7
    container_name: kafka-connect
    ports:
     - 8083:8083
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_connect_statuses
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  # === Auto-register Debezium Connector ===
  debezium-init:
    image: curlimages/curl:latest
    container_name: debezium-init
    depends_on:
      kafka-connect:
        condition: service_healthy
    volumes:
      - ./debezium:/config
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Waiting for Kafka Connect to be ready..."
        sleep 5
        echo "Registering Debezium Postgres connector..."
        curl -X POST -H "Accept:application/json" -H "Content-Type:application/json" \
          http://kafka-connect:8083/connectors/ \
          -d @/config/register-postgres-kafka.json
        echo ""
        echo "Connector registration complete!"
        echo "Checking registered connectors:"
        curl -s http://kafka-connect:8083/connectors/ | grep -o '\[.*\]'
    restart: "no"

volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  kafka_logs:
